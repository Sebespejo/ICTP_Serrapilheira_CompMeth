git config --global user.name Sebespejo
library(tidyverse)
library(reshape2)
library(tidyverse)
library(reshape2)
files_path <- list.files(path = "data/raw/cestes",
pattern = ".csv",
full.names = TRUE)
files_path
file_names <- gsub(".csv", "", basename(files_path), fixed = TRUE)
for (i in 1:length(files_path)) {
data <- read.csv(files_path[[i]])
assign(file_names[i], data)
}
ls()
#Understanding comm object
head(comm)
dim(comm)
summary(comm)
# Understanding the object `coord`
head(coord)
# Understanding the object `envir`
head(envir)
dim(envir)
summary(envir)
# Understanding the object `splist`
head(splist)
dim(splist)
summary(splist)
# Understanding the object `traits`
head(traits)
dim(traits)
summary(traits)
# How many species in the dataset? We can simply count the number of rows in `splist`.
nrow(splist)
# How many areas sampled? We can count the number of lines of `comm` or `envir` objects.
nrow(comm)
nrow(envir)
# How many environmental variables?
# all variables except for the first column with the id
names(envir)[-1]
# counting the variables
length(names(envir)[-1])
# Let's use the `merge()` function from the __base__ package to add the coordinate column to the object containing the environmental variables. This function will combine two worksheets through a common identifier, which is the primary key. In the case of the `envir` object, the primary key is the `Sites` column that contains the number of the sampled locations. We can call this column using the `$` operator.
envir$Sites
head(envir)
head(coord)
# counting the variables
length(names(envir)[-1])
# Let's use the `merge()` function from the __base__ package to add the coordinate column to the object containing the environmental variables. This function will combine two worksheets through a common identifier, which is the primary key. In the case of the `envir` object, the primary key is the `Sites` column that contains the number of the sampled locations. We can call this column using the `$` operator.
envir$Sites
# There are 97 areas. Let's see what happens when we use the `summary()` function.
summary(envir$Sites)
# if we get the class of this vector, we will see that it is numeric
class(envir$Sites)
# we want it to be a categorical variable. For this, we convert into a factor
as.factor(envir$Sites)
# if we get the class of this vector, we will see that it is numeric
class(envir$Sites)
# if we just use as.factor, we don't do the conversion, let's do an assignment
envir$Sites <- as.factor(envir$Sites)
# we want it to be a categorical variable. For this, we convert into a factor
as.factor(envir$Sites)
# if we get the class of this vector, we will see that it is numeric
class(envir$Sites)
# Let's do the same for the `Sites` variable of the `coord` object.
coord$Sites <- as.factor(coord$Sites)
# Let's then apply the `merge` function.
envir_coord <- merge(x = envir,
y = coord,
by = "Sites")
# We can check the join with the `dim()` and `head()` functions. How many columns should we have at the end? What columns were added?
dim(envir)
dim(coord)
dim(envir_coord)
head(envir_coord)
view(envir_coord)
# vector containing all sites
Sites <- envir$Sites
length(Sites)
# vector with the name of species
n_sp <- nrow(splist)
n_sp
# creating table with each species in each area species in rows
comm_df <- tidyr::pivot_longer(comm, cols = 2:ncol(comm), names_to = "TaxCode", values_to = "Abundance")
# Let's check the object's header and dimensions.
dim(comm_df)
head(comm_df)
# vector with the name of species
n_sp <- nrow(splist)
n_sp
# creating table with each species in each area species in rows
comm_df <- tidyr::pivot_longer(comm, cols = 2:ncol(comm), names_to = "TaxCode", values_to = "Abundance")
# Let's check the object's header and dimensions.
dim(comm_df)
head(comm_df)
# First, let's add the species information contained in `splist` to `comm_df` using the `TaxCode` column.
comm_sp <- merge(comm_df, splist, by = "TaxCode")
head(comm_sp)
comm_sp_join <-dplyr::full_join(comm_df, splist, by = "TaxCode)
# Table `comm_sp` and `traits`
# Second, we added the species attribute data to the community table. In the `traits` table, the column that identifies the species is called `Sp`. Before doing the join, we need to change the name to match the name of the column in `comm_sp` which is `TaxCode`.
names(traits)
# renaming the first element
colnames(traits)[1] <- "TaxCode"
comm_traits <- merge(comm_sp, traits, by = "TaxCode")
head(comm_traits)
# Table `comm_traits` and `envir_coord`
# We are almost in the end, we will now bind the environmental data (already containing the coordinates) to the community table using the column `Sites`.
comm_total <- merge(comm_traits, envir_coord, by = "Sites")
head(comm_total)
# Finally, we end our script writing the modified table. We will use the function `write.csv()`.
write.csv(x = comm_total,
file = "data/processed/03_Pavoine_full_table.csv",
row.names = FALSE)
# Extra: filter ----------------------------------------------------------------
sp1 <- filter(comm_total, TaxCode == "sp1", Elev > 3)
View(sp1)
comm_sp_join<-dplyr::left_join(comm_df, splist, by = "TaxCode")
head(comm_sp_join)
# Second, we added the species attribute data to the community table. In the `traits` table, the column that identifies the species is called `Sp`. Before doing the join, we need to change the name to match the name of the column in `comm_sp` which is `TaxCode`.
names(traits)
# renaming the first element
colnames(traits)[1] <- "TaxCode"
comm_traits <- merge(comm_sp, traits, by = "TaxCode")
head(comm_traits)
comm_sp_join<-dplyr::full_join(comm_df, splist, by = "TaxCode")
comm_total <- merge(comm_traits, envir_coord, by = "Sites")
head(comm_total)
view(comm_total)
dir.create("data/processed")
if( !dir.exists("data/processed")) dir.create("data/processed")
# Finally, we end our script writing the modified table. We will use the function `write.csv()`.
write.csv(x = comm_total,
file = "data/processed/03_Pavoine_full_table.csv",
row.names = FALSE)
# Extra: filter ----------------------------------------------------------------
sp1 <- filter(comm_total, TaxCode == "sp1", Elev > 3)
View(sp1)
# Finally, we end our script writing the modified table. We will use the function `write.csv()`.
write.csv(x = comm_total,
file = "data/processed/03_Pavoine_full_table.csv",
row.names = FALSE)
